buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
    }
}

plugins {
    id 'net.eikehirsch.react' version '0.3.1'
    id 'com.moowork.node' version '0.11'
}

ext {
    implTitle = "Soc net"
    version   = "1.0"
}

apply from: rootProject.file('common.gradle')

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
//apply plugin: 'jetty'
apply plugin: 'com.google.protobuf'

war {
    baseName = 'socnet'
    version = '0.0.1-SNAPSHOT'
}

jar {
    baseName = 'socnet'
    version = '0.0.1-SNAPSHOT'
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

sourceCompatibility = "${javaSource}"
targetCompatibility = "${javaTarget}"

sourceSets {
    main {
        proto {
            srcDirs = [ 'src/main/proto' ]
        }
        java {
            srcDirs = [
                'src/main/java',
                '${buildDir}/gen/main/java'
            ]
        }
    }
    test {
        compileClasspath += main.output
        java {
            srcDirs = ['src/test/java']
        }
    }
}

ext {
    if (project.hasProperty("mainClass")) {
        mainManifest = manifest {
            attributes 'Main-Class': mainClass
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    generateProtoTasks.generatedFilesBaseDir = "$buildDir/gen"
    generateProtoTasks {
        all().each { task -> }
        ofSourceSet('main')
    }
}

dependencies {
    compile "com.google.code.gson:gson:2.4"
    compile "com.google.guava:guava:${guava_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"

    compile "ch.qos.logback:logback-classic:${logback_version}"
    // compile "org.webjars:react:0.13.1"
    compile "org.springframework:spring-core:${spring_version}"
    compile "org.springframework:spring-jdbc:${spring_version}"
    compile "org.springframework:spring-web:${spring_version}"
    compile "org.springframework:spring-webmvc:${spring_version}"
    compile "org.springframework:spring-context-support:${spring_version}"
    compile "org.springframework:spring-beans:${spring_version}"
    compile "org.springframework:spring-tx:${spring_version}"
    compile "org.springframework:spring-expression:${spring_version}"
    compile "org.springframework.data:spring-data-jpa:${spring_data_jpa_version}"
    compile "org.springframework.data:spring-data-mongodb:${spring_mongodb_version}"
    compile "org.mongodb:mongo-java-driver:${mongodb_version}"
    compile "io.jsonwebtoken:jjwt:${json_webtoken_version}"

    compile "org.springframework.security:spring-security-web:${spring_security_ver}"
    compile "org.springframework.security:spring-security-config:${spring_security_ver}"
    compile "org.springframework.security:spring-security-taglibs:4.0.1.RELEASE"

    compile "mysql:mysql-connector-java:${mysql_connector_java_ver}"
    compile "org.hibernate:hibernate-core:${hibernate_version}"
    compile "org.hibernate:hibernate-entitymanager:${hibernate_version}"
    compile "org.hibernate:hibernate-validator:${hibernate_validator_ver}"
    compile "org.passay:passay:${passay_version}"
    compile "commons-dbcp:commons-dbcp:${commons_dbcp_version}"
    compile "commons-fileupload:commons-fileupload:1.3.1"
    compile "com.jayway.restassured:rest-assured:${rest_assured_version}"

    compile "javax.el:el-api:2.2"
    compile "javax.servlet:jstl:${jstl_version}"
    compile "javax.inject:javax.inject:${javax_inject_version}"
    compile "javax.mail:mail:${javax_mail_version}"
    compile "javax.servlet:servlet-api:2.5"
    compile "org.jsoup:jsoup:1.8.3"
    compile "com.google.maps:google-maps-services:${google_map_version}"
    compile "com.google.protobuf:protobuf-java:$protobuf_version"
    compile "org.slf4j:slf4j-nop:1.7.25"

    compile project(":common")
    compile project(":ether")

    // For eclipse .classpath
    compile files(new File(project.rootDir, "socialauth/build/libs"))
    compile files(new File(project.rootDir, "common/build/libs/common_snapshot.jar"))

    // testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework:spring-test:${spring_version}"
    testCompile "org.hamcrest:hamcrest-core:${hamcrest_version}"
    testCompile "org.hamcrest:hamcrest-library:${hamcrest_version}"
    testCompile "junit:junit:${junit_version}"

    testRuntime project(":common")
    testRuntime project(":ether")
    testRuntime "org.mortbay.jetty:jetty-runner:7.5.4.v20111024"
    testRuntime "org.mortbay.jetty:jetty-runner:8.1.15.v20140411"
}

gretty {
    // port  = 8080
    contextPath = '/'
    servletContainer = 'tomcat8'
    debugPort = 5005
    debugSuspend = false
    jvmArgs = ['-Djava.net.preferIPv4Stack=true']

    if (System.properties['org.eclipse.jetty.annotations.maxWait'] != null) {
        jvmArgs.add('-Dorg.eclipse.jetty.annotations.maxWait=' + System.properties['org.eclipse.jetty.annotations.maxWait'])
    }
}

task getDeps(type: Copy) {
    from configurations.testRuntime
    into "${rootProject.projectDir}/socnet/build/libs"
}

node {
    version = '5.0.0'
    npmVersion = '3.3'
    download = true
    nodeModulesDir = file("${project.buildDir}/node_modules")
}

task npmCacheConfig(type: NpmTask) {
    description = "Configure NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install js packages"
    args = [ 'install' ]
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task npmSyncJavaScript(type: Sync) {
    from 'node_modules'
    into 'src/main/webapp/client'
}

task nodeJs(type: NodeTask) {
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

// processResources.dependsOn(npmPackages)

clean.delete << file('cscope.*')
clean.delete << file('tags')
